# Feedback

Morgan Osborn

## Game.cs

Good Aspects:
	Clear structurte throughout the class with senssible method names including comments which explain their purpose.
	Encapsulation used within this class to ensure that all game logic is in one location.
	Good use of OOP Principles, properly intitialised and interactions with the player and room objects.
	Easy to expand in the future and there is minimal hardcoding so allows for easy modification.

Improvements:
	Lack of error handling and input validation.
	Introduce a loop or recall of the game menu because once it finishes its primary loop the program is halted.
	Introduce a battle function so the health attribute is used and can be ammended.

## Player.cs

Good Aspects:
	Encapuslation of player properties is introduced well.
	Good and functional player inventory system.
	Simple, readable and fluent code.

Improvements:
	Inventory only stores one item at a time, maybe allow more than one item to be held at a time.
	Add validation to the items, if its null it could introduce an error.
	Maybe include player actions like defend and fight once the battle function is introduced.

## Room.cs

Good Aspects:
	GetDescription() method works affectively and promptly providing room descirptions.
	Simplicity of the code allows for easy interpretation.
	Proper use of properties such as 'item'.

Improvements:
	Add methods for rooms to introduce a greater sense of interactvity within the game.
	Expand to multiple rooms allowing the user to manouver through the game and make progress.
	Support other entities in the room such as monsters or enemies,

# Checklist:

## Pass standard:
	
1. [/] The code compiles and runs.
2. [/] The player can explore at least one room.
3. [/] Object instantiation, method calls evident.
4. [/] There is code review from two students.
5. [/] Handle invalid commands gracefully without crashing the program.

## 2:2 standard:

1. [.]  Rooms can contain multiple items or monsters.
2. [.]  The Testing class is used.
3. [/]  The player can pick up items through an implementation of the
        Player.PickUpItem() method.
4. [/]  The C# style guide is followed partially.
5. [.]  At least one room has a description and can contain one item or one
	monster. These functionalities are given by the Room.GetDescription() method.
6. [/]  Method calls from ‘Main’ to methods in other classes

## 2:1 standard:

1. [?]  Pull Requests and code reviews are noted
2. [?]  You have taken account of the reviews and merging your changes.
3. [/]  There is a complete implementation of your code with no issues.
4. [/]  Commenting is mostly through the code files.
5. [/]  There are at least one Game and Player objects.
6. [?]  There is evidence of testing.
7. [/]  Error handling is performed well but there are still issues.
8. [/]  There is clear evidence of object-oriented features such as classes, object 	instantiation, encapsulation and methods.

## First standard:

1. [?]  You have taken effective account of the reviews by merging your
	changes or suggesting alternative approaches.
2. [?]  The video demonstrates a critical reflection and that you learned from
	the assignment’s experience.
3. [.]  The implementation is complete with excellent error handling.
4. [.]  The C# style guide is shown to be adhered to. XML documenting
	comments are throughout the code.
5. [.]  The testing class uses ‘debug.assert’ to verify aspects of the code.
6. [/]  The implementation of classes, object instantiation, encapsulation
	and methods are complete and with no issues.

Question Guide:
Have the requirements been met?
Is the code formatted using the Style Guidelines correctly?
Is the code easy to read?
Are different errors handled correctly?
